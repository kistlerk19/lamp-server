#!/usr/bin/env bash
# EC2 User Data Script for Task Manager Application
# This script bootstraps new instances for auto-scaling

set -e

# Variables (replace with your actual values)
GITHUB_REPO="https://github.com/kistlerk19/lamp-server.git"
GITHUB_BRANCH="main"
APP_NAME="task-manager"
APP_DIR="/var/www/${APP_NAME}"
DB_HOST="task-manager.c7mu0g8w2uu3.eu-west-1.rds.amazonaws.com"
DB_NAME="task_manager"
DB_USERNAME="admin"
DB_PASSWORD="PHASE2LABONE"  # Consider using AWS Secrets Manager

# Logging
LOG_FILE="/var/log/user-data.log"
exec > >(tee -a ${LOG_FILE})
exec 2>&1

echo "Starting user data script execution at $(date)"

# Update system
echo "Updating system packages..."
apt-get update -y
apt-get upgrade -y

# Install required packages
echo "Installing LAMP stack and dependencies..."
apt-get install -y \
    apache2 \
    php8.2 \
    php8.2-cli \
    php8.2-common \
    php8.2-mysql \
    php8.2-zip \
    php8.2-gd \
    php8.2-mbstring \
    php8.2-curl \
    php8.2-xml \
    php8.2-bcmath \
    php8.2-json \
    libapache2-mod-php8.2 \
    git \
    mysql-client \
    unzip \
    curl \
    awscli \
    jq

# Enable Apache modules
echo "Enabling Apache modules..."
a2enmod rewrite
a2enmod ssl
a2enmod headers

# Create application directory
echo "Setting up application directory..."
mkdir -p ${APP_DIR}
chown www-data:www-data ${APP_DIR}

# Clone application
echo "Cloning application from GitHub..."
cd /tmp
git clone ${GITHUB_REPO} task-manager-repo
cd task-manager-repo
git checkout ${GITHUB_BRANCH}
cp -R * ${APP_DIR}/
chown -R www-data:www-data ${APP_DIR}

# Create .env file
echo "Creating environment configuration..."
cat > ${APP_DIR}/.env << EOF
DB_HOST=${DB_HOST}
DB_NAME=${DB_NAME}
DB_USERNAME=${DB_USERNAME}
DB_PASSWORD=${DB_PASSWORD}
DB_PORT=3306

APP_ENV=production
APP_DEBUG=false
APP_NAME="Task Manager"
APP_URL=http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

SESSION_LIFETIME=120
CSRF_PROTECTION=true

LOG_LEVEL=warning
LOG_PATH=/var/log/${APP_NAME}/app.log
EOF

chown www-data:www-data ${APP_DIR}/.env
chmod 600 ${APP_DIR}/.env

# Update database configuration
echo "Updating database configuration..."
cat > ${APP_DIR}/config/database.php << 'EOF'
<?php
function loadEnv($path) {
    if (!file_exists($path)) {
        return;
    }
    
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos(trim($line), '#') === 0) {
            continue;
        }
        
        list($name, $value) = explode('=', $line, 2);
        $name = trim($name);
        $value = trim($value);
        
        if (!array_key_exists($name, $_SERVER) && !array_key_exists($name, $_ENV)) {
            putenv(sprintf('%s=%s', $name, $value));
            $_ENV[$name] = $value;
            $_SERVER[$name] = $value;
        }
    }
}

loadEnv(__DIR__ . '/../.env');

class Database {
    private $host;
    private $db_name;
    private $username;
    private $password;
    private $port;
    
    public $conn;
    
    public function __construct() {
        $this->host = $_ENV['DB_HOST'] ?? getenv('DB_HOST') ?? 'localhost';
        $this->db_name = $_ENV['DB_NAME'] ?? getenv('DB_NAME') ?? 'task_manager';
        $this->username = $_ENV['DB_USERNAME'] ?? getenv('DB_USERNAME') ?? 'root';
        $this->password = $_ENV['DB_PASSWORD'] ?? getenv('DB_PASSWORD') ?? '';
        $this->port = $_ENV['DB_PORT'] ?? getenv('DB_PORT') ?? 3306;
    }
    
    public function getConnection() {
        $this->conn = null;
        
        try {
            $this->conn = new mysqli(
                $this->host,
                $this->username,
                $this->password,
                $this->db_name,
                $this->port
            );
            
            $this->conn->set_charset("utf8mb4");
            
            if ($this->conn->connect_error) {
                throw new Exception("Connection failed: " . $this->conn->connect_error);
            }
            
        } catch(Exception $e) {
            error_log("Database connection error: " . $e->getMessage());
            $log_path = $_ENV['LOG_PATH'] ?? '/var/log/task-manager/app.log';
            if (is_writable(dirname($log_path))) {
                file_put_contents($log_path, 
                    date('Y-m-d H:i:s') . " - Database connection error: " . $e->getMessage() . "\n", 
                    FILE_APPEND | LOCK_EX
                );
            }
            die("Database connection failed. Please try again later.");
        }
        
        return $this->conn;
    }
    
    public function closeConnection() {
        if ($this->conn) {
            $this->conn->close();
        }
    }
    
    public function testConnection() {
        try {
            $conn = $this->getConnection();
            if ($conn) {
                $this->closeConnection();
                return true;
            }
        } catch (Exception $e) {
            return false;
        }
        return false;
    }
}
?>
EOF

# Create health check endpoint
echo "Creating health check endpoint..."
cat > ${APP_DIR}/health.php << 'EOF'
<?php
header('Content-Type: application/json');
require_once 'config/database.php';

$health = [
    'status' => 'healthy',
    'timestamp' => date('c'),
    'server' => gethostname(),
    'instance_id' => file_get_contents('http://169.254.169.254/latest/meta-data/instance-id'),
    'services' => []
];

try {
    $database = new Database();
    $conn = $database->getConnection();
    
    if ($conn) {
        $health['services']['database'] = 'connected';
        $database->closeConnection();
    } else {
        $health['services']['database'] = 'failed';
        $health['status'] = 'unhealthy';
    }
} catch (Exception $e) {
    $health['services']['database'] = 'failed';
    $health['status'] = 'unhealthy';
    $health['error'] = $e->getMessage();
}

$disk_free = disk_free_space('/');
$disk_total = disk_total_space('/');
$disk_usage = round((($disk_total - $disk_free) / $disk_total) * 100, 2);

$health['services']['disk'] = [
    'usage_percent' => $disk_usage,
    'status' => $disk_usage > 90 ? 'critical' : ($disk_usage > 80 ? 'warning' : 'ok')
];

if ($disk_usage > 90) {
    $health['status'] = 'unhealthy';
}

http_response_code($health['status'] === 'healthy' ? 200 : 503);
echo json_encode($health, JSON_PRETTY_PRINT);
?>
EOF

# Configure Apache virtual host
echo "Configuring Apache virtual host..."
cat > /etc/apache2/sites-available/${APP_NAME}.conf << EOF
<VirtualHost *:80>
    ServerName $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
    DocumentRoot ${APP_DIR}
    
    <Directory ${APP_DIR}>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
        
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; font-src 'self' https://cdnjs.cloudflare.com; img-src 'self' data:;"
    </Directory>
    
    LogLevel warn
    ErrorLog /var/log/${APP_NAME}/apache_error.log
    CustomLog /var/log/${APP_NAME}/apache_access.log combined
    
    ServerTokens Prod
    ServerSignature Off
    
    <Files ".env">
        Require all denied
    </Files>
    
    <FilesMatch "\.(htaccess|htpasswd|ini|log|sql)$">
        Require all denied
    </FilesMatch>
</VirtualHost>
EOF

# Create log directory
echo "Creating log directories..."
mkdir -p /var/log/${APP_NAME}
chown www-data:www-data /var/log/${APP_NAME}

# Configure PHP
echo "Configuring PHP..."
cat > /etc/php/8.2/apache2/conf.d/99-custom.ini << EOF
display_errors = Off
log_errors = On
error_log = /var/log/${APP_NAME}/php_errors.log

expose_php = Off
allow_url_fopen = Off
allow_url_include = Off

session.cookie_httponly = 1
session.cookie_secure = 0
session.use_strict_mode = 1
session.gc_maxlifetime = 7200

file_uploads = On
upload_max_filesize = 10M
max_file_uploads = 5

memory_limit = 256M
max_execution_time = 30
max_input_time = 60

mysqli.default_host = ${DB_HOST}
mysqli.default_user = ${DB_USERNAME}
mysqli.default_pw = ${DB_PASSWORD}
EOF

# Enable site and disable default
echo "Configuring Apache sites..."
a2dissite 000-default
a2ensite ${APP_NAME}

# Set up log rotation
echo "Setting up log rotation..."
cat > /etc/logrotate.d/${APP_NAME} << EOF
/var/log/${APP_NAME}/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 www-data www-data
    postrotate
        /bin/systemctl reload apache2 > /dev/null 2>&1 || true
    endscript
}
EOF

# Create health check script
echo "Creating health check script..."
cat > /usr/local/bin/${APP_NAME}-health-check << 'EOF'
#!/bin/bash
LOG_FILE="/var/log/task-manager/health-check.log"
APP_URL="http://localhost/health.php"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

log_message() {
    echo "[$TIMESTAMP] $1" >> "$LOG_FILE"
}

if ! systemctl is-active --quiet apache2; then
    log_message "ERROR: Apache is not running. Attempting to restart..."
    systemctl restart apache2
    if systemctl is-active --quiet apache2; then
        log_message "INFO: Apache restarted successfully"
    else
        log_message "ERROR: Failed to restart Apache"
        exit 1
    fi
fi

HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" --max-time 10)

if [ "$HTTP_CODE" = "200" ]; then
    log_message "INFO: Application health check passed (HTTP $HTTP_CODE)"
else
    log_message "WARNING: Application health check failed (HTTP $HTTP_CODE)"
    systemctl restart apache2
    log_message "INFO: Apache restarted due to failed health check"
fi

DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 85 ]; then
    log_message "WARNING: Disk usage is at ${DISK_USAGE}%"
fi

if [ -f "$LOG_FILE" ] && [ $(stat -c%s "$LOG_FILE" 2>/dev/null || echo 0) -gt 10485760 ]; then
    mv "$LOG_FILE" "${LOG_FILE}.old"
    log_message "INFO: Health check log rotated"
fi
EOF

chmod +x /usr/local/bin/${APP_NAME}-health-check

# Set up cron job for health checks
echo "Setting up health check cron job..."
echo "*/5 * * * * root /usr/local/bin/${APP_NAME}-health-check" >> /etc/crontab

# Configure firewall
echo "Configuring firewall..."
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow http
ufw allow https

# Install CloudWatch agent (optional)
echo "Installing CloudWatch agent..."
wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb || true
apt-get install -f -y

# Configure CloudWatch agent
cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
{
    "logs": {
        "logs_collected": {
            "files": {
                "collect_list": [
                    {
                        "file_path": "/var/log/${APP_NAME}/apache_error.log",
                        "log_group_name": "/aws/ec2/${APP_NAME}/apache-error",
                        "log_stream_name": "{instance_id}"
                    },
                    {
                        "file_path": "/var/log/${APP_NAME}/apache_access.log",
                        "log_group_name": "/aws/ec2/${APP_NAME}/apache-access",
                        "log_stream_name": "{instance_id}"
                    },
                    {
                        "file_path": "/var/log/${APP_NAME}/app.log",
                        "log_group_name": "/aws/ec2/${APP_NAME}/application",
                        "log_stream_name": "{instance_id}"
                    }
                ]
            }
        }
    },
    "metrics": {
        "namespace": "TaskManager/EC2",
        "metrics_collected": {
            "cpu": {
                "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                ],
                "metrics_collection_interval": 300
            },
            "disk": {
                "measurement": [
                    "used_percent"
                ],
                "metrics_collection_interval": 300,
                "resources": [
                    "*"
                ]
            },
            "diskio": {
                "measurement": [
                    "io_time"
                ],
                "metrics_collection_interval": 300,
                "resources": [
                    "*"
                ]
            },
            "mem": {
                "measurement": [
                    "mem_used_percent"
                ],
                "metrics_collection_interval": 300
            }
        }
    }
}
EOF

# Start CloudWatch agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
    -a fetch-config \
    -m ec2 \
    -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
    -s

# Test database connection and wait if needed
echo "Testing database connection..."
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if mysql -h ${DB_HOST} -u ${DB_USERNAME} -p${DB_PASSWORD} ${DB_NAME} -e "SELECT 1;" > /dev/null 2>&1; then
        echo "Database connection successful"
        break
    else
        echo "Database connection failed, attempt $attempt/$max_attempts"
        sleep 10
        ((attempt++))
    fi
done

if [ $attempt -gt $max_attempts ]; then
    echo "ERROR: Could not connect to database after $max_attempts attempts"
    exit 1
fi

# Restart Apache to apply all configurations
echo "Restarting Apache..."
systemctl restart apache2
systemctl enable apache2

# Final verification
echo "Running final verification..."
sleep 5

if systemctl is-active --quiet apache2; then
    echo "SUCCESS: Apache is running"
else
    echo "ERROR: Apache failed to start"
    systemctl status apache2
    exit 1
fi

# Test application
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost/health.php" --max-time 10)
if [ "$HTTP_CODE" = "200" ]; then
    echo "SUCCESS: Application health check passed"
else
    echo "WARNING: Application health check returned HTTP $HTTP_CODE"
fi

echo "User data script completed successfully at $(date)"
echo "Instance is ready to serve traffic"

# Send completion notification to CloudWatch
aws cloudwatch put-metric-data --region $(curl -s http://169.254.169.254/latest/meta-data/placement/region) --namespace "TaskManager/AutoScaling" --metric-data MetricName=InstanceBootstrap,Value=1,Unit=Count